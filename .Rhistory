rownames(BaseTimepointSet) <- BaseTimepointSet$RID
deltaFeaturepredictors <- predictors[regexpr('_bl', predictors) < 0][-(c(1:2))]
TimePointsSubset <- list();
Orderbytimepoint <- NULL
m <- 0
i <- 1;
for (m in months) {
TimePointsSubset[[i]] <- subset(AdjustedFrame,M == m)
rownames(TimePointsSubset[[i]]) <- TimePointsSubset[[i]]$RID
TimePointsSubset[[i]]$Year_bl_LastVisit <- lastTimepointSet[TimePointsSubset[[i]]$RID,"Years_bl"]
TimePointsSubset[[i]]$Last_DX <- lastTimepointSet[TimePointsSubset[[i]]$RID,"DX"]
TimePointsSubset[[i]]$TimeToLastVisit <- TimePointsSubset[[i]]$Year_bl_LastVisit - TimePointsSubset[[i]]$Years_bl
if (delta)
{
deltaObservations <- TimePointsSubset[[i]][,deltaFeaturepredictors] - BaseTimepointSet[rownames(TimePointsSubset[[i]]),deltaFeaturepredictors]
colnames(deltaObservations) <- paste("Delta",colnames(deltaObservations),sep="_")
TimePointsSubset[[i]] <- cbind(TimePointsSubset[[i]],deltaObservations)
}
TimePointsSubset[[i]] <- TimePointsSubset[[i]][complete.cases(TimePointsSubset[[i]][,predictors]),]
Orderbytimepoint <- rbind(Orderbytimepoint,TimePointsSubset[[i]])
i <- i + 1
}
AdjustedFrame <- Orderbytimepoint
AdjustedFrame <- AdjustedFrame[order(AdjustedFrame$Years_bl),]
AdjustedFrame <- AdjustedFrame[order(as.numeric(AdjustedFrame$RID)),]
Orderbytimepoint <- NULL
if (delta)
if (delta){
predictors <- c(predictors,colnames(deltaObservations))
}
print(table(AdjustedFrame$DX))
MCISubset <- subset(AdjustedFrame,DX == "NL to MCI" | DX == "MCI" | DX == "Dementia to MCI")
MCIIDS <- unique(MCISubset$RID)
print(length(MCIIDS))
subsetMCIADConversion <-  subset(AdjustedFrame,DX == "MCI to Dementia" | DX == "Dementia")
print(nrow(subsetMCIADConversion))
MCIConverters <- subsetMCIADConversion$RID %in% MCIIDS
subsetMCIADConversion <- subsetMCIADConversion[MCIConverters,]
print(nrow(subsetMCIADConversion))
pdis <- subsetMCIADConversion$RID
subsetMCIADConversion <- subsetMCIADConversion[c(TRUE,pdis[-1] != pdis[1:(length(pdis)-1)]),]
print(nrow(subsetMCIADConversion))
rownames(subsetMCIADConversion) <- subsetMCIADConversion$RID
MCItoADorderbytimepoint <- NULL
for (m in months){
TimePointsMCISubset <- subset(MCISubset,M == m)
rownames(TimePointsMCISubset) <-  TimePointsMCISubset$RID
TimePointsMCISubset$TimeToEvent <- subsetMCIADConversion[TimePointsMCISubset$RID,"Years_bl"] - TimePointsMCISubset$Years_bl
MCItoADorderbytimepoint <- rbind(MCItoADorderbytimepoint,TimePointsMCISubset)
}
controlMCIToADset <- MCItoADorderbytimepoint[is.na(MCItoADorderbytimepoint$TimeToEvent),]
controlMCIToADset <- subset(controlMCIToADset,TimeToLastVisit > 3)
hist(controlMCIToADset$TimeToLastVisit)
controlMCIToADset$TimeToEvent <- controlMCIToADset$TimeToLastVisit
caseMCIToADset <- MCItoADorderbytimepoint[!is.na(MCItoADorderbytimepoint$TimeToEvent),]
caseMCIToADset <- subset(caseMCIToADset,TimeToEvent > 0 & TimeToEvent < 5.0 )
hist(caseMCIToADset$TimeToEvent)
controlMCIToADset$class <- 0
caseMCIToADset$class <- 1
MCI_to_AD_set <- rbind(controlMCIToADset,caseMCIToADset)
MCI_to_AD_set$TimeToLastVisit <- NULL
MCI_to_AD_TrainSet <- MCI_to_AD_set[MCI_to_AD_set$D1==1,]
print(table(MCI_to_AD_TrainSet$class))
print(table(MCI_to_AD_TrainSet$VISCODE))
MCI_to_ADSets <- list();
MCI_TO_AD_Model <- list();
MCI_TO_AD_TimeModel <- list();
n=1
pMCItoADEvent <- 0;
for (n in 1:numberOfRandomSamples){
randomnumber <- sample(1:nrow(MCI_to_AD_TrainSet),nrow(MCI_to_AD_TrainSet))
MCI_to_AD_RandomSet <- MCI_to_AD_TrainSet[randomnumber,]
MCI_to_AD_RandomSet <- MCI_to_AD_RandomSet[order(as.numeric(MCI_to_AD_RandomSet$RID)),]
RID <- MCI_to_AD_RandomSet$RID
set1 <- MCI_to_AD_RandomSet[c(RID[1:length(RID)-1] != RID[-1],TRUE),]
rownames(set1) <- set1$RID
set1 <- set1[complete.cases(set1),]
print(nrow(set1))
print(table(set1$class))
pMCItoADEvent <- pMCItoADEvent + sum(set1$class)/nrow(set1)
MCI_to_ADSets[[n]] <- set1[,c("class",predictors)]
if (asFactor)
{
MCI_to_ADSets[[n]]$class <- as.factor(MCI_to_ADSets[[n]]$class)
}
MCI_TO_AD_Model[[n]] <- MLMethod(class ~ .,MCI_to_ADSets[[n]],...)
sm <- summary(MCI_TO_AD_Model[[n]])
print(sm$tAUC)
MCI_TO_AD_Model[[n]]$BSWiMS.model$bootCV$data <- NULL
MCI_TO_AD_Model[[n]]$BSWiMS.model$bootCV$testOutcome <- NULL
MCI_TO_AD_Model[[n]]$BSWiMS.model$bootCV$testPrediction <- NULL
set1 <- subset(set1,class==1)
print(nrow(set1))
MCI_to_ADSets[[n]] <- set1[,c("TimeToEvent",predictors)]
MCI_to_ADSets[[n]]$TimeToEvent <- set1$TimeToEvent
MCI_TO_AD_TimeModel[[n]] <- MLMethod(TimeToEvent ~ .,MCI_to_ADSets[[n]],...)
MCI_TO_AD_TimeModel[[n]]$univariate <- NULL
MCI_TO_AD_TimeModel[[n]]$BSWiMS.model$bootCV$data <- NULL
MCI_TO_AD_TimeModel[[n]]$BSWiMS.model$bootCV$testOutcome <- NULL
MCI_TO_AD_TimeModel[[n]]$BSWiMS.model$bootCV$testPrediction <- NULL
}
for (n in 1:numberOfRandomSamples){
randomnumber <- sample(1:nrow(MCI_to_AD_TrainSet),nrow(MCI_to_AD_TrainSet))
MCI_to_AD_RandomSet <- MCI_to_AD_TrainSet[randomnumber,]
MCI_to_AD_RandomSet <- MCI_to_AD_RandomSet[order(as.numeric(MCI_to_AD_RandomSet$RID)),]
RID <- MCI_to_AD_RandomSet$RID
set1 <- MCI_to_AD_RandomSet[c(RID[1:length(RID)-1] != RID[-1],TRUE),]
rownames(set1) <- set1$RID
set1 <- set1[complete.cases(set1),]
print(nrow(set1))
print(table(set1$class))
pMCItoADEvent <- pMCItoADEvent + sum(set1$class)/nrow(set1)
MCI_to_ADSets[[n]] <- set1[,c("class",predictors)]
if (asFactor){
MCI_to_ADSets[[n]]$class <- as.factor(MCI_to_ADSets[[n]]$class)
}
MCI_TO_AD_Model[[n]] <- MLMethod(class ~ .,MCI_to_ADSets[[n]],hysteresis)
sm <- summary(MCI_TO_AD_Model[[n]])
print(sm$tAUC)
MCI_TO_AD_Model[[n]]$BSWiMS.model$bootCV$data <- NULL
MCI_TO_AD_Model[[n]]$BSWiMS.model$bootCV$testOutcome <- NULL
MCI_TO_AD_Model[[n]]$BSWiMS.model$bootCV$testPrediction <- NULL
set1 <- subset(set1,class==1)
print(nrow(set1))
MCI_to_ADSets[[n]] <- set1[,c("TimeToEvent",predictors)]
MCI_to_ADSets[[n]]$TimeToEvent <- set1$TimeToEvent
MCI_TO_AD_TimeModel[[n]] <- MLMethod(TimeToEvent ~ .,MCI_to_ADSets[[n]],hysteresis)
MCI_TO_AD_TimeModel[[n]]$univariate <- NULL
MCI_TO_AD_TimeModel[[n]]$BSWiMS.model$bootCV$data <- NULL
MCI_TO_AD_TimeModel[[n]]$BSWiMS.model$bootCV$testOutcome <- NULL
MCI_TO_AD_TimeModel[[n]]$BSWiMS.model$bootCV$testPrediction <- NULL
}
View(MLMethod)
n=1
pMCItoADEvent <- 0;
n in 1:numberOfRandomSamples
for (n in 1:numberOfRandomSamples){print(n)}
randomnumber <- sample(1:nrow(MCI_to_AD_TrainSet),nrow(MCI_to_AD_TrainSet))
MCI_to_AD_RandomSet <- MCI_to_AD_TrainSet[randomnumber,]
MCI_to_AD_RandomSet <- MCI_to_AD_RandomSet[order(as.numeric(MCI_to_AD_RandomSet$RID)),]
RID <- MCI_to_AD_RandomSet$RID
set1 <- MCI_to_AD_RandomSet[c(RID[1:length(RID)-1] != RID[-1],TRUE),]
rownames(set1) <- set1$RID
set1 <- set1[complete.cases(set1),]
print(nrow(set1))
print(table(set1$class))
pMCItoADEvent <- pMCItoADEvent + sum(set1$class)/nrow(set1)
MCI_to_ADSets[[n]] <- set1[,c("class",predictors)]
if (asFactor){
MCI_to_ADSets[[n]]$class <- as.factor(MCI_to_ADSets[[n]]$class)
}
asFactor
MCI_TO_AD_Model[[n]] <- MLMethod(class ~ .,MCI_to_ADSets[[n]],hysteresis)
MCI_TO_AD_Model[[n]] <- MLMethod(class ~ .,MCI_to_ADSets[[n]],hysteresis=hysteresis)
sm <- summary(MCI_TO_AD_Model[[n]])
print(sm$tAUC)
hysteresis
sm
MCI_to_ADSets[[n]] <- set1[,c("TimeToEvent",predictors)]
MCI_to_ADSets[[n]]$TimeToEvent <- set1$TimeToEvent
MCI_TO_AD_TimeModel[[n]] <- MLMethod(TimeToEvent ~ .,MCI_to_ADSets[[n]],hysteresis=hysteresis)
MCI_TO_AD_TimeModel[[n]]$univariate <- NULL
MCI_TO_AD_TimeModel[[n]]$univariate <- NULL
MCI_TO_AD_TimeModel[[n]]$BSWiMS.model$bootCV$data <- NULL
MCI_TO_AD_TimeModel[[n]]$BSWiMS.model$bootCV$testOutcome <- NULL
MCI_TO_AD_TimeModel[[n]]$BSWiMS.model$bootCV$testPrediction <- NULL
n=1
pMCItoADEvent <- 0;
for (n in 1:numberOfRandomSamples){
randomnumber <- sample(1:nrow(MCI_to_AD_TrainSet),nrow(MCI_to_AD_TrainSet))
MCI_to_AD_RandomSet <- MCI_to_AD_TrainSet[randomnumber,]
MCI_to_AD_RandomSet <- MCI_to_AD_RandomSet[order(as.numeric(MCI_to_AD_RandomSet$RID)),]
RID <- MCI_to_AD_RandomSet$RID
set1 <- MCI_to_AD_RandomSet[c(RID[1:length(RID)-1] != RID[-1],TRUE),]
rownames(set1) <- set1$RID
set1 <- set1[complete.cases(set1),]
print(nrow(set1))
print(table(set1$class))
pMCItoADEvent <- pMCItoADEvent + sum(set1$class)/nrow(set1)
MCI_to_ADSets[[n]] <- set1[,c("class",predictors)]
if (asFactor){
MCI_to_ADSets[[n]]$class <- as.factor(MCI_to_ADSets[[n]]$class)
}
MCI_TO_AD_Model[[n]] <- MLMethod(class ~ .,MCI_to_ADSets[[n]],hysteresis=hysteresis)
sm <- summary(MCI_TO_AD_Model[[n]])
#print(sm$tAUC)
MCI_TO_AD_Model[[n]]$BSWiMS.model$bootCV$data <- NULL
MCI_TO_AD_Model[[n]]$BSWiMS.model$bootCV$testOutcome <- NULL
MCI_TO_AD_Model[[n]]$BSWiMS.model$bootCV$testPrediction <- NULL
set1 <- subset(set1,class==1)
#print(nrow(set1))
MCI_to_ADSets[[n]] <- set1[,c("TimeToEvent",predictors)]
MCI_to_ADSets[[n]]$TimeToEvent <- set1$TimeToEvent
MCI_TO_AD_TimeModel[[n]] <- MLMethod(TimeToEvent ~ .,MCI_to_ADSets[[n]],hysteresis=hysteresis)
MCI_TO_AD_TimeModel[[n]]$univariate <- NULL
MCI_TO_AD_TimeModel[[n]]$BSWiMS.model$bootCV$data <- NULL
MCI_TO_AD_TimeModel[[n]]$BSWiMS.model$bootCV$testOutcome <- NULL
MCI_TO_AD_TimeModel[[n]]$BSWiMS.model$bootCV$testPrediction <- NULL
}
#args
AdjustedFrame <- AdjustedTrainFrame
predictors=c("AGE","PTGENDER",colnames(AdjustedTrainFrame)[-c(1:22)])
numberOfRandomSamples=50
MLMethod=HLCM_EM
hysteresis = 0.1
#
AdjustedFrame$RID <- as.character(AdjustedFrame$RID)
suppressMessages(library("FRESA.CAD"))
months <- as.numeric(names(table(AdjustedFrame$M)))
print(months)
cpredictors <- predictors
AdjustedFrame <- AdjustedFrame[order(AdjustedFrame$EXAMDATE),]
AdjustedFrame <- AdjustedFrame[order(as.numeric(AdjustedFrame$RID)),]
pdis <- AdjustedFrame$RID
lastTimepointSet <- AdjustedFrame[c(pdis[1:(length(pdis)-1)] != pdis[-1],TRUE),]
print(table(lastTimepointSet$VISCODE))
rownames(lastTimepointSet) <- lastTimepointSet$RID
print(nrow(lastTimepointSet))
print(table(lastTimepointSet$DX))
Orderbytimepoint <- vector()
m <- 0
for (m in months){
TimePointsSubset <- subset(AdjustedFrame,M == m)
TimePointsSubset$TimeToLastVisit <- as.numeric(as.Date(lastTimepointSet[TimePointsSubset$RID,"EXAMDATE"]) - as.Date(TimePointsSubset$EXAMDATE))/365.25
TimePointsSubset$DeltaVentricle <- as.numeric(lastTimepointSet[TimePointsSubset$RID,"Ventricles"] - TimePointsSubset$Ventricles)
TimePointsSubset$DeltaAdas13 <- as.numeric(lastTimepointSet[TimePointsSubset$RID,"ADAS13"] - TimePointsSubset$ADAS13)
TimePointsSubset <- TimePointsSubset[complete.cases(TimePointsSubset[,predictors]),]
Orderbytimepoint <- rbind(Orderbytimepoint,TimePointsSubset)
}
hist(Orderbytimepoint$TimeToLastVisit)
hist(Orderbytimepoint$DeltaVentricle)
hist(Orderbytimepoint$DeltaAdas13)
print(sum(Orderbytimepoint$TimeToLastVisit < 0))
#  AdjustedFrame <- subset(Orderbytimepoint,TimeToLastVisit >= 0)
AdjustedFrame <- Orderbytimepoint
AdjustedFrame <- AdjustedFrame[order(AdjustedFrame$EXAMDATE),]
AdjustedFrame <- AdjustedFrame[order(as.numeric(AdjustedFrame$RID)),]
AdjustedFrame$SQRTimeToLastVisit <- AdjustedFrame$TimeToLastVisit*AdjustedFrame$TimeToLastVisit
AdjustedFrame$SQRTTimeToLastVisit <- sqrt(AdjustedFrame$TimeToLastVisit)
AdjustedFrame$CUBTimeToLastVisit <- AdjustedFrame$TimeToLastVisit*AdjustedFrame$SQRTimeToLastVisit
AdjustedFrame$LOGTimeToLastVisit <- log(1+AdjustedFrame$TimeToLastVisit)
AdjustedFrame$MeanCVLOGTimeToLastVisit <- log(1+AdjustedFrame$TimeToLastVisit)*AdjustedFrame$COMeanThickness
AdjustedFrame$MMSELOGTimeToLastVisit <- log(1+AdjustedFrame$TimeToLastVisit)*AdjustedFrame$MMSE
print(c(nrow(AdjustedFrame),ncol(AdjustedFrame)))
predictorsAdas13 <- c(predictors,c("TimeToLastVisit","SQRTimeToLastVisit","LOGTimeToLastVisit","CUBTimeToLastVisit","SQRTTimeToLastVisit","MeanCVLOGTimeToLastVisit","MMSELOGTimeToLastVisit","DeltaAdas13"))
predictorsVentricle <- c(predictors,c("TimeToLastVisit","SQRTimeToLastVisit","LOGTimeToLastVisit","CUBTimeToLastVisit","SQRTTimeToLastVisit","MeanCVLOGTimeToLastVisit","MMSELOGTimeToLastVisit","DeltaVentricle"))
Orderbytimepoint <- NULL
MCISubset <- subset(AdjustedFrame,DX == "NL to MCI" | DX == "MCI" | DX == "Dementia to MCI")
MCISubset <- MCISubset[complete.cases(MCISubset),]
print(nrow(MCISubset))
print(sum(is.na(MCISubset)))
MCI_ADAS_MODEL <- list();
MCI_Ventricle_ICV_MODEL <- list();
numberOfRandomSamples=5
for (n in 1:numberOfRandomSamples){
randomnumber <- sample(1:nrow(MCISubset),nrow(MCISubset))
MCI_Set <- MCISubset[randomnumber,]
MCI_Set <- MCI_Set[order(as.numeric(MCI_Set$RID)),]
RID <- MCI_Set$RID
set1 <- MCI_Set[c(TRUE,RID[-1] != RID[1:length(RID)-1]),]
rownames(set1) <- set1$RID
print(table(set1$DX))
print(nrow(set1))
hist(set1$LOGTimeToLastVisit)
setA <- set1[,predictorsAdas13]
randomnumber <- sample(1:nrow(setA),nrow(setA),replace = TRUE)
MCI_ADAS_MODEL[[n]] <- MLMethod(DeltaAdas13 ~ .,setA[randomnumber,],hysteresis = hysteresis)
sm <- summary(MCI_ADAS_MODEL[[n]])
print(rownames(sm$coefficients))
print(sm$R2)
plot(set1$DeltaAdas13~predict(MCI_ADAS_MODEL[[n]],setA))
MCI_ADAS_MODEL[[n]]$BSWiMS.model$bootCV$data <- NULL
MCI_ADAS_MODEL[[n]]$BSWiMS.model$bootCV$testOutcome <- NULL
MCI_ADAS_MODEL[[n]]$BSWiMS.model$bootCV$testPrediction <- NULL
setA <- set1[,predictorsVentricle]
MCI_Ventricle_ICV_MODEL[[n]] <- MLMethod(DeltaVentricle ~ .,setA[randomnumber,],hysteresis = hysteresis)
sm <- summary(MCI_Ventricle_ICV_MODEL[[n]])
print(rownames(sm$coefficients))
print(sm$R2)
plot(set1$DeltaVentricle~predict(MCI_Ventricle_ICV_MODEL[[n]],setA))
MCI_Ventricle_ICV_MODEL[[n]]$BSWiMS.model$bootCV$data <- NULL
MCI_Ventricle_ICV_MODEL[[n]]$BSWiMS.model$bootCV$testOutcome <- NULL
MCI_Ventricle_ICV_MODEL[[n]]$BSWiMS.model$bootCV$testPrediction <- NULL
}
predicitionModels <- list(MCI_Ventricle_ICV_MODEL = MCI_Ventricle_ICV_MODEL,
MCI_ADAS_MODEL=MCI_ADAS_MODEL
)
NCSubset <- subset(AdjustedFrame,DX == "NL" | DX == "MCI to NL")
NCSubset <- NCSubset[complete.cases(NCSubset),]
print(nrow(NCSubset))
print(sum(is.na(NCSubset)))
NC_ADAS_MODEL <- list();
NC_Ventricle_ICV_MODEL <- list();
for (n in 1:numberOfRandomSamples){
randomnumber <- sample(1:nrow(NCSubset),nrow(NCSubset))
NC_Set <- NCSubset[randomnumber,]
NC_Set <- NC_Set[order(as.numeric(NC_Set$RID)),]
RID <- NC_Set$RID
set1 <- NC_Set[c(TRUE,RID[-1] != RID[1:length(RID)-1]),]
rownames(set1) <- set1$RID
print(rownames(sm$coefficients))
print(nrow(set1))
hist(set1$LOGTimeToLastVisit)
setA <- set1[,predictorsAdas13]
randomnumber <- sample(1:nrow(setA),nrow(setA),replace = TRUE)
NC_ADAS_MODEL[[n]] <- MLMethod(DeltaAdas13 ~ .,setA[randomnumber,],hysteresis = hysteresis)
sm <- summary(NC_ADAS_MODEL[[n]])
print(rownames(sm$coefficients))
print(sm$R2)
plot(set1$DeltaAdas13~predict(NC_ADAS_MODEL[[n]],setA))
NC_ADAS_MODEL[[n]]$BSWiMS.model$bootCV$data <- NULL
NC_ADAS_MODEL[[n]]$BSWiMS.model$bootCV$testOutcome <- NULL
NC_ADAS_MODEL[[n]]$BSWiMS.model$bootCV$testPrediction <- NULL
setA <- set1[,predictorsVentricle]
NC_Ventricle_ICV_MODEL[[n]] <- MLMethod(DeltaVentricle ~ .,setA[randomnumber,],hysteresis = hysteresis)
sm <- summary(NC_Ventricle_ICV_MODEL[[n]])
print(rownames(sm$coefficients))
print(sm$R2)
plot(set1$DeltaVentricle~predict(NC_Ventricle_ICV_MODEL[[n]],setA))
NC_Ventricle_ICV_MODEL[[n]]$BSWiMS.model$bootCV$data <- NULL
NC_Ventricle_ICV_MODEL[[n]]$BSWiMS.model$bootCV$testOutcome <- NULL
NC_Ventricle_ICV_MODEL[[n]]$BSWiMS.model$bootCV$testPrediction <- NULL
}
for (n in 1:numberOfRandomSamples){
randomnumber <- sample(1:nrow(NCSubset),nrow(NCSubset))
NC_Set <- NCSubset[randomnumber,]
NC_Set <- NC_Set[order(as.numeric(NC_Set$RID)),]
RID <- NC_Set$RID
set1 <- NC_Set[c(TRUE,RID[-1] != RID[1:length(RID)-1]),]
rownames(set1) <- set1$RID
#print(rownames(sm$coefficients))
print(nrow(set1))
hist(set1$LOGTimeToLastVisit)
setA <- set1[,predictorsAdas13]
randomnumber <- sample(1:nrow(setA),nrow(setA),replace = TRUE)
NC_ADAS_MODEL[[n]] <- MLMethod(DeltaAdas13 ~ .,setA[randomnumber,],hysteresis = hysteresis)
#sm <- summary(NC_ADAS_MODEL[[n]])
#print(rownames(sm$coefficients))
#print(sm$R2)
plot(set1$DeltaAdas13~predict(NC_ADAS_MODEL[[n]],setA))
NC_ADAS_MODEL[[n]]$BSWiMS.model$bootCV$data <- NULL
NC_ADAS_MODEL[[n]]$BSWiMS.model$bootCV$testOutcome <- NULL
NC_ADAS_MODEL[[n]]$BSWiMS.model$bootCV$testPrediction <- NULL
setA <- set1[,predictorsVentricle]
NC_Ventricle_ICV_MODEL[[n]] <- MLMethod(DeltaVentricle ~ .,setA[randomnumber,],hysteresis = hysteresis)
#sm <- summary(NC_Ventricle_ICV_MODEL[[n]])
#print(rownames(sm$coefficients))
#print(sm$R2)
plot(set1$DeltaVentricle~predict(NC_Ventricle_ICV_MODEL[[n]],setA))
NC_Ventricle_ICV_MODEL[[n]]$BSWiMS.model$bootCV$data <- NULL
NC_Ventricle_ICV_MODEL[[n]]$BSWiMS.model$bootCV$testOutcome <- NULL
NC_Ventricle_ICV_MODEL[[n]]$BSWiMS.model$bootCV$testPrediction <- NULL
}
predicitionModels <- list(MCI_Ventricle_ICV_MODEL = MCI_Ventricle_ICV_MODEL,
MCI_ADAS_MODEL=MCI_ADAS_MODEL)
NCSubset <- subset(AdjustedFrame,DX == "NL" | DX == "MCI to NL")
NCSubset <- NCSubset[complete.cases(NCSubset),]
print(nrow(NCSubset))
print(sum(is.na(NCSubset)))
NC_ADAS_MODEL <- list();
NC_Ventricle_ICV_MODEL <- list();
for (n in 1:numberOfRandomSamples){
randomnumber <- sample(1:nrow(NCSubset),nrow(NCSubset))
NC_Set <- NCSubset[randomnumber,]
NC_Set <- NC_Set[order(as.numeric(NC_Set$RID)),]
RID <- NC_Set$RID
set1 <- NC_Set[c(TRUE,RID[-1] != RID[1:length(RID)-1]),]
rownames(set1) <- set1$RID
#print(rownames(sm$coefficients))
print(nrow(set1))
hist(set1$LOGTimeToLastVisit)
setA <- set1[,predictorsAdas13]
randomnumber <- sample(1:nrow(setA),nrow(setA),replace = TRUE)
NC_ADAS_MODEL[[n]] <- MLMethod(DeltaAdas13 ~ .,setA[randomnumber,],hysteresis = hysteresis)
#sm <- summary(NC_ADAS_MODEL[[n]])
#print(rownames(sm$coefficients))
#print(sm$R2)
plot(set1$DeltaAdas13~predict(NC_ADAS_MODEL[[n]],setA))
NC_ADAS_MODEL[[n]]$BSWiMS.model$bootCV$data <- NULL
NC_ADAS_MODEL[[n]]$BSWiMS.model$bootCV$testOutcome <- NULL
NC_ADAS_MODEL[[n]]$BSWiMS.model$bootCV$testPrediction <- NULL
setA <- set1[,predictorsVentricle]
NC_Ventricle_ICV_MODEL[[n]] <- MLMethod(DeltaVentricle ~ .,setA[randomnumber,],hysteresis = hysteresis)
#sm <- summary(NC_Ventricle_ICV_MODEL[[n]])
#print(rownames(sm$coefficients))
#print(sm$R2)
plot(set1$DeltaVentricle~predict(NC_Ventricle_ICV_MODEL[[n]],setA))
NC_Ventricle_ICV_MODEL[[n]]$BSWiMS.model$bootCV$data <- NULL
NC_Ventricle_ICV_MODEL[[n]]$BSWiMS.model$bootCV$testOutcome <- NULL
NC_Ventricle_ICV_MODEL[[n]]$BSWiMS.model$bootCV$testPrediction <- NULL
}
#args
Models=CognitiveClassModels
load("data/temp/HLCM_EM_CognitiveClassModels_25.RDATA")
#args
Models=CognitiveClassModels
TestDataFrame = testingFrame
###
predictors <- Models$predictors
months <- as.numeric(names(table(TestDataFrame$M)))
print(months)
TestDataFrame$class <- numeric(nrow(TestDataFrame))
TestDataFrame$TimeToEvent <- numeric(nrow(TestDataFrame))
TestDataFrame$RID <- as.character(TestDataFrame$RID)
library("FRESA.CAD")
if (is.null(months)){
months <- as.numeric(names(table(TestDataFrame$M)))
print(months)
}
cpredictors <- predictors
TestDataFrame <- TestDataFrame[order(TestDataFrame$EXAMDATE),]
TestDataFrame <- TestDataFrame[order(as.numeric(TestDataFrame$RID)),]
pdis <- TestDataFrame$RID
lastTimepointSet <- TestDataFrame[c(pdis[1:(length(pdis)-1)] != pdis[-1],TRUE),]
rownames(lastTimepointSet) <- lastTimepointSet$RID
print(nrow(TestDataFrame))
print(nrow(lastTimepointSet))
BaseTimepointSet <- TestDataFrame[c(TRUE,pdis[-1] != pdis[1:(length(pdis)-1)]),]
rownames(BaseTimepointSet) <- BaseTimepointSet$RID
deltaFeaturepredictors <- predictors[regexpr('_bl', predictors) < 0][-(c(1:2))]
print(nrow(BaseTimepointSet))
TimePointsSubset <- list();
Orderbytimepoint <- NULL
m <- 0
i <- 1;
lastDate <- BaseTimepointSet$EXAMDATE
names(lastDate) <- BaseTimepointSet$RID
lastDX <- BaseTimepointSet$DX
names(lastDX) <- BaseTimepointSet$RID
print(sum(is.na(TestDataFrame$M)))
#  totR <- 0
if (length(months) > 1)
{
for (m in months)
{
TimePointsSubset[[i]] <- subset(TestDataFrame,M == m)
rownames(TimePointsSubset[[i]]) <- TimePointsSubset[[i]]$RID
TimePointsSubset[[i]]$Year_bl_LastVisit <- lastTimepointSet[TimePointsSubset[[i]]$RID,"Years_bl"]
TimePointsSubset[[i]]$Last_DX <-  lastTimepointSet[TimePointsSubset[[i]]$RID,"DX"]
ldx <- TimePointsSubset[[i]]$DX
names(ldx) <- TimePointsSubset[[i]]$RID
ldx <- ldx[!is.na(TimePointsSubset[[i]]$DX)]
lastDX[names(ldx)] <- ldx
lastDate[names(ldx)] <- TimePointsSubset[[i]][names(ldx),"EXAMDATE"]
TimePointsSubset[[i]]$TimeToLastVisit <- TimePointsSubset[[i]]$Year_bl_LastVisit - TimePointsSubset[[i]]$Years_bl
deltaObservations <- TimePointsSubset[[i]][,deltaFeaturepredictors] - BaseTimepointSet[rownames(TimePointsSubset[[i]]),deltaFeaturepredictors]
colnames(deltaObservations) <- paste("Delta",colnames(deltaObservations),sep="_")
TimePointsSubset[[i]] <- cbind(TimePointsSubset[[i]],deltaObservations)
Orderbytimepoint <- rbind(Orderbytimepoint,TimePointsSubset[[i]])
i <- i + 1
}
TestDataFrame <- Orderbytimepoint
Orderbytimepoint <- NULL
print(nrow(TestDataFrame))
}
else
#  totR <- 0
if (length(months) > 1){
for (m in months){
TimePointsSubset[[i]] <- subset(TestDataFrame,M == m)
rownames(TimePointsSubset[[i]]) <- TimePointsSubset[[i]]$RID
TimePointsSubset[[i]]$Year_bl_LastVisit <- lastTimepointSet[TimePointsSubset[[i]]$RID,"Years_bl"]
TimePointsSubset[[i]]$Last_DX <-  lastTimepointSet[TimePointsSubset[[i]]$RID,"DX"]
ldx <- TimePointsSubset[[i]]$DX
names(ldx) <- TimePointsSubset[[i]]$RID
ldx <- ldx[!is.na(TimePointsSubset[[i]]$DX)]
lastDX[names(ldx)] <- ldx
lastDate[names(ldx)] <- TimePointsSubset[[i]][names(ldx),"EXAMDATE"]
TimePointsSubset[[i]]$TimeToLastVisit <- TimePointsSubset[[i]]$Year_bl_LastVisit - TimePointsSubset[[i]]$Years_bl
deltaObservations <- TimePointsSubset[[i]][,deltaFeaturepredictors] - BaseTimepointSet[rownames(TimePointsSubset[[i]]),deltaFeaturepredictors]
colnames(deltaObservations) <- paste("Delta",colnames(deltaObservations),sep="_")
TimePointsSubset[[i]] <- cbind(TimePointsSubset[[i]],deltaObservations)
Orderbytimepoint <- rbind(Orderbytimepoint,TimePointsSubset[[i]])
i <- i + 1
}
TestDataFrame <- Orderbytimepoint
Orderbytimepoint <- NULL
print(nrow(TestDataFrame))
}else{
TestDataFrame <- lastTimepointSet
TestDataFrame$M <- numeric(nrow(TestDataFrame))
TestDataFrame$Year_bl_LastVisit <- numeric(nrow(TestDataFrame))
TestDataFrame$TimeToLastVisit <- numeric(nrow(TestDataFrame))
deltaObservations <- TestDataFrame[,deltaFeaturepredictors] - BaseTimepointSet[rownames(TestDataFrame),deltaFeaturepredictors]
colnames(deltaObservations) <- paste("Delta",colnames(deltaObservations),sep="_")
TestDataFrame <- cbind(TestDataFrame,deltaObservations)
rownames(TestDataFrame) <- c(1:nrow(TestDataFrame))
print(nrow(TestDataFrame))
print(sum(is.na(lastTimepointSet)))
}
length(months)
if (is.null(Models$CrossModels[[1]]$oridinalModels)){
crossprediction <- predict(Models$CrossModels[[1]],lastTimepointSet)
}else{
crossprediction <- predict(Models$CrossModels[[1]]$oridinalModels,lastTimepointSet)
}
for (n in 2:length(Models$CrossModels)){
if (is.null(Models$CrossModels[[n]]$oridinalModels)){
crossprediction <- crossprediction + predict(Models$CrossModels[[n]],lastTimepointSet)
} else {
crossprediction <- crossprediction + predict(Models$CrossModels[[n]]$oridinalModels,lastTimepointSet)
}
}
if (is.null(Models$CrossModels[[1]]$oridinalModels)){
crossprediction <- as.integer(crossprediction/length(Models$CrossModels)+0.5)
} else  {
crossprediction <- as.data.frame(crossprediction[,(ncol(crossprediction)-2):ncol(crossprediction)]/length(Models$CrossModels))
rownames(crossprediction) <- lastTimepointSet$RID
}
crossprediction <- crossprediction[order(as.numeric(rownames(crossprediction))),]
rownames(crossprediction)
View(Models)
